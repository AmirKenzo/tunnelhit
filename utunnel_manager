#!/bin/bash

GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

ALLOWED_IPS=(
    "91.239.214.95" "109.172.87.136" "5.75.207.246" "5.75.207.246" "5.75.207.246"
    "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246"
    "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246"
    "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246" "5.75.207.246"
)

get_architecture() {
    ARCH=$(uname -m)
    case $ARCH in
        x86_64|amd64)
            echo "https://raw.githubusercontent.com/aliamg1356/utunnel/refs/heads/main/utunnel_amd64"
            ;;
        aarch64|arm64)
            echo "https://raw.githubusercontent.com/aliamg1356/utunnel/refs/heads/main/utunnel-arm64"
            ;;
        *)
            echo -e "${RED}Unsupported CPU architecture: $ARCH. Exiting.${NC}"
            exit 1
            ;;
    esac
}

check_utunnel_permissions() {
    if [[ -f "/opt/utunnel/utunnel" && ! -x "/opt/utunnel/utunnel" ]]; then
        echo -e "${YELLOW}Setting execute permissions on utunnel...${NC}"
        chmod +x /opt/utunnel/utunnel
    fi
}

check_allowed_ips() {
    local interface_ips=$(ip -4 addr show | grep inet | awk '{print $2}' | cut -d/ -f1)
    local allowed=false

    for ip in $interface_ips; do
        if [[ " ${ALLOWED_IPS[@]} " =~ " ${ip} " ]]; then
            allowed=true
            break
        fi
    done

    if ! $allowed; then
        echo -e "${YELLOW}Warning: Server IP is not in the allowed list. Limited access granted.${NC}"
        return 1  
    else
        return 0  
    fi
}

show_menu() {
    echo -e "${YELLOW}
               -**-
     =@%  :@@  -@%:  @@@. :@@:  @@ +@@  @@#    %@@    -@@= .@@+    @@@
     =@%  :@@ =@@@@% #@@@.:@@:  @@ +@@.@@=    *@%@@    :@@=@@+    #@*@*
     =@%  :@@ *@@@%#%@@@@-:@@@@@@@ +@@@@%    .@@ %@-    .@@@=    :@% @@-
     -@@  +@@ =@@@- @@@@@.:@@:  @@ +@@ %@%   @@@@@@@.    #@%     @@@@@@%
      +@@@@@.  :@@%  :@@  :@@:  @@ +@@  %@% +@@   @@#    #@%    #@%   %@#
	  
	       ************  ushkayanet utunnel manager  ***************
    ${NC}"
    echo -e "${CYAN}Please select a mode:${NC}"
    echo -e "${GREEN}1) Server mode${NC}"
    echo -e "${BLUE}2) Client mode${NC}"
    echo -e "${CYAN}3) Tunnel status${NC}"
    echo -e "${YELLOW}4) Restart mode${NC}"
    echo -e "${RED}5) Stop mode${NC}"
    echo -e "${RED}6) Delete mode${NC}"
    echo -e "${CYAN}7) Reset Timer${NC}"
    echo -e "${CYAN}8) Exit${NC}"
}

server_mode() {
    mkdir -p /opt/utunnel
    cd /opt/utunnel

    if [[ ! -f /opt/utunnel/utunnel ]]; then
        echo -e "${YELLOW}Downloading utunnel binary...${NC}"
        URL=$(get_architecture)
        wget "$URL" -O /opt/utunnel/utunnel
        if [[ $? -ne 0 ]]; then
            echo -e "${RED}Failed to download utunnel binary. Exiting.${NC}"
            exit 1
        fi
    fi

    check_utunnel_permissions

    read -p "$(echo -e ${CYAN}"Enter a name for the service: "${NC})" service_name
    service_name="utunnel_${service_name}" 
    read -p "$(echo -e ${CYAN}"Enter tunnel port: "${NC})" tunnel_port
    read -p "$(echo -e ${CYAN}"Enter token: "${NC})" token

    echo -e "${YELLOW}Enter forwarded ports (press Enter to finish):${NC}"
    ports=()
    while true; do
        read -p "$(echo -e ${CYAN}"Port (or Enter to finish): "${NC})" port
        if [[ -z "$port" ]]; then
            break
        fi
        ports+=("\"$port\"")
    done

    echo -e "${CYAN}Please select a transport mode:${NC}"
    echo -e "${GREEN}1) TCP${NC}"
    echo -e "${BLUE}2) TCP+MUX${NC}"
    echo -e "${YELLOW}3) UDP${NC}"
    echo -e "${CYAN}4) WS${NC}"
    echo -e "${RED}5) WS+MUX${NC}"
    read -p "$(echo -e ${CYAN}"Enter your choice (1/2/3/4/5): "${NC})" transport_choice

    config_file="/opt/utunnel/config_${service_name}.toml"

    case $transport_choice in
        1)
            cat <<EOL > "$config_file"
[server]
bind_addr = "0.0.0.0:$tunnel_port"
transport = "tcp"
accept_udp = false
token = "$token"
keepalive_period = 75
nodelay = true
heartbeat = 40
channel_size = 2048
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
ports = [
$(for ((i=0; i<${#ports[@]}; i++)); do
    if [[ $i -eq $((${#ports[@]}-1)) ]]; then
        echo "${ports[$i]}"
    else
        echo "${ports[$i]},"
    fi
done)
]
EOL
            ;;
        2)
            cat <<EOL > "$config_file"
[server]
bind_addr = "0.0.0.0:$tunnel_port"
transport = "tcpmux"
token = "$token"
keepalive_period = 75
nodelay = true
heartbeat = 40
channel_size = 2048
mux_con = 8
mux_version = 1
mux_framesize = 32768
mux_recievebuffer = 4194304
mux_streambuffer = 65536
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
ports = [
$(for ((i=0; i<${#ports[@]}; i++)); do
    if [[ $i -eq $((${#ports[@]}-1)) ]]; then
        echo "${ports[$i]}"
    else
        echo "${ports[$i]},"
    fi
done)
]
EOL
            ;;
        3)
            cat <<EOL > "$config_file"
[server]
bind_addr = "0.0.0.0:$tunnel_port"
transport = "udp"
token = "$token"
heartbeat = 20
channel_size = 2048
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
ports = [
$(for ((i=0; i<${#ports[@]}; i++)); do
    if [[ $i -eq $((${#ports[@]}-1)) ]]; then
        echo "${ports[$i]}"
    else
        echo "${ports[$i]},"
    fi
done)
]
EOL
            ;;
        4)
            cat <<EOL > "$config_file"
[server]
bind_addr = "0.0.0.0:$tunnel_port"
transport = "ws"
token = "$token"
channel_size = 2048
keepalive_period = 75
heartbeat = 40
nodelay = true
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
ports = [
$(for ((i=0; i<${#ports[@]}; i++)); do
    if [[ $i -eq $((${#ports[@]}-1)) ]]; then
        echo "${ports[$i]}"
    else
        echo "${ports[$i]},"
    fi
done)
]
EOL
            ;;
        5)
            cat <<EOL > "$config_file"
[server]
bind_addr = "0.0.0.0:$tunnel_port"
transport = "wsmux"
accept_udp = false
token = "$token"
keepalive_period = 75
nodelay = true
heartbeat = 40
channel_size = 2048
mux_con = 8
mux_version = 1
mux_framesize = 32768
mux_recievebuffer = 4194304
mux_streambuffer = 65536
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
ports = [
$(for ((i=0; i<${#ports[@]}; i++)); do
    if [[ $i -eq $((${#ports[@]}-1)) ]]; then
        echo "${ports[$i]}"
    else
        echo "${ports[$i]},"
    fi
done)
]
EOL
            ;;
        *)
            echo -e "${RED}Invalid choice. Exiting.${NC}"
            exit 1
            ;;
    esac

    service_file="/etc/systemd/system/${service_name}.service"
    cat <<EOL > "$service_file"
[Unit]
Description=UTunnel Reverse Tunnel Service
After=network.target

[Service]
Type=simple
ExecStart=/opt/utunnel/utunnel -c $config_file
Restart=always
RestartSec=3
LimitNOFILE=1048576
WorkingDirectory=/opt/utunnel

[Install]
WantedBy=multi-user.target
EOL

    chmod +x "$service_file"

    systemctl daemon-reload
    systemctl enable "$service_name"
    systemctl start "$service_name"

    echo -e "${GREEN}UTunnel service created successfully.${NC}"
    echo -e "${CYAN}Config file: $config_file${NC}"
    echo -e "${CYAN}Service name: $service_name${NC}"
}

client_mode() {
    mkdir -p /opt/utunnel
    cd /opt/utunnel

    if [[ ! -f /opt/utunnel/utunnel ]]; then
        echo -e "${YELLOW}Downloading utunnel binary...${NC}"
        URL=$(get_architecture)
        wget "$URL" -O /opt/utunnel/utunnel
        if [[ $? -ne 0 ]]; then
            echo -e "${RED}Failed to download utunnel binary. Exiting.${NC}"
            exit 1
        fi
    fi

    check_utunnel_permissions

    read -p "$(echo -e ${CYAN}"Enter a name for the service: "${NC})" service_name
    service_name="utunnel_${service_name}" 
    read -p "$(echo -e ${CYAN}"Enter remote IP address: "${NC})" remote_ip
    read -p "$(echo -e ${CYAN}"Enter remote port: "${NC})" remote_port
    read -p "$(echo -e ${CYAN}"Enter token: "${NC})" token

    echo -e "${CYAN}Please select a transport mode:${NC}"
    echo -e "${GREEN}1) TCP${NC}"
    echo -e "${BLUE}2) TCP+MUX${NC}"
    echo -e "${YELLOW}3) UDP${NC}"
    echo -e "${CYAN}4) WS${NC}"
    echo -e "${RED}5) WS+MUX${NC}"
    read -p "$(echo -e ${CYAN}"Enter your choice (1/2/3/4/5): "${NC})" transport_choice

    config_file="/opt/utunnel/config_${service_name}.toml"

    case $transport_choice in
        1)
            cat <<EOL > "$config_file"
[client]
remote_addr = "$remote_ip:$remote_port"
transport = "tcp"
token = "$token"
connection_pool = 8
aggressive_pool = false
keepalive_period = 75
dial_timeout = 10
nodelay = true
retry_interval = 3
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
EOL
            ;;
        2)
            cat <<EOL > "$config_file"
[client]
remote_addr = "$remote_ip:$remote_port"
transport = "tcpmux"
token = "$token"
connection_pool = 8
aggressive_pool = false
keepalive_period = 75
dial_timeout = 10
retry_interval = 3
nodelay = true
mux_version = 1
mux_framesize = 32768
mux_recievebuffer = 4194304
mux_streambuffer = 65536
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
EOL
            ;;
        3)
            cat <<EOL > "$config_file"
[client]
remote_addr = "$remote_ip:$remote_port"
transport = "udp"
token = "$token"
connection_pool = 8
aggressive_pool = false
retry_interval = 3
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
EOL
            ;;
        4)
            cat <<EOL > "$config_file"
[client]
remote_addr = "$remote_ip:$remote_port"
edge_ip = ""
transport = "ws"
token = "$token"
connection_pool = 8
aggressive_pool = false
keepalive_period = 75
dial_timeout = 10
retry_interval = 3
nodelay = true
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
EOL
            ;;
        5)
            cat <<EOL > "$config_file"
[client]
remote_addr = "$remote_ip:$remote_port"
transport = "wsmux"
token = "$token"
connection_pool = 8
aggressive_pool = false
keepalive_period = 75
dial_timeout = 10
nodelay = true
retry_interval = 3
mux_version = 1
mux_framesize = 32768
mux_recievebuffer = 4194304
mux_streambuffer = 65536
sniffer_log = "/opt/utunnel/utunnel.json"
log_level = "info"
EOL
            ;;
        *)
            echo -e "${RED}Invalid choice. Exiting.${NC}"
            exit 1
            ;;
    esac

    service_file="/etc/systemd/system/${service_name}.service"
    cat <<EOL > "$service_file"
[Unit]
Description=UTunnel Reverse Tunnel Service
After=network.target

[Service]
Type=simple
ExecStart=/opt/utunnel/utunnel -c $config_file
Restart=always
RestartSec=3
LimitNOFILE=1048576
WorkingDirectory=/opt/utunnel

[Install]
WantedBy=multi-user.target
EOL

    chmod +x "$service_file"

    systemctl daemon-reload
    systemctl enable "$service_name"
    systemctl start "$service_name"

    echo -e "${GREEN}UTunnel service created successfully.${NC}"
    echo -e "${CYAN}Config file: $config_file${NC}"
    echo -e "${CYAN}Service name: $service_name${NC}"
}

status_mode() {
    services=($(systemctl list-unit-files --type=service | grep utunnel | awk '{print $1}'))
    
    if [[ ${#services[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No utunnel services found.${NC}"
        return
    fi

    echo -e "${CYAN}List of utunnel services and their status:${NC}"
    for service in "${services[@]}"; do
        status=$(systemctl is-active "$service")
        if [[ "$status" == "active" ]]; then
            echo -e "${GREEN}$service: ${status} (Service is running)${NC}"
        else
            echo -e "${RED}$service: ${status} (Service is not running)${NC}"
        fi
    done
}

restart_mode() {
    services=($(systemctl list-unit-files --type=service | grep utunnel | awk '{print $1}'))
    
    if [[ ${#services[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No utunnel services found.${NC}"
        return
    fi

    echo -e "${CYAN}List of utunnel services:${NC}"
    for i in "${!services[@]}"; do
        echo -e "${GREEN}$((i+1))) ${services[$i]}${NC}"
    done

    echo -e "${YELLOW}0) Return to main menu${NC}"

    read -p "$(echo -e ${CYAN}"Enter the number of the service to restart (or 'all' to restart all): "${NC})" choice

    if [[ "$choice" == "0" ]]; then
        return
    elif [[ "$choice" == "all" ]]; then
        for service in "${services[@]}"; do
            echo -e "${YELLOW}Restarting $service...${NC}"
            systemctl restart "$service"
        done
    else
        if [[ $choice -ge 1 && $choice -le ${#services[@]} ]]; then
            service=${services[$((choice-1))]}
            echo -e "${YELLOW}Restarting $service...${NC}"
            systemctl restart "$service"
        else
            echo -e "${RED}Invalid choice.${NC}"
        fi
    fi

    echo -e "${GREEN}Restart completed.${NC}"
}

stop_mode() {
    services=($(systemctl list-unit-files --type=service | grep utunnel | awk '{print $1}'))
    
    if [[ ${#services[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No utunnel services found.${NC}"
        return
    fi

    echo -e "${CYAN}List of utunnel services:${NC}"
    for i in "${!services[@]}"; do
        echo -e "${GREEN}$((i+1))) ${services[$i]}${NC}"
    done

    echo -e "${YELLOW}0) Return to main menu${NC}"

    read -p "$(echo -e ${CYAN}"Enter the number of the service to stop (or 'all' to stop all): "${NC})" choice

    if [[ "$choice" == "0" ]]; then
        return
    elif [[ "$choice" == "all" ]]; then
        for service in "${services[@]}"; do
            echo -e "${YELLOW}Stopping $service...${NC}"
            systemctl stop "$service"
        done
    else
        if [[ $choice -ge 1 && $choice -le ${#services[@]} ]]; then
            service=${services[$((choice-1))]}
            echo -e "${YELLOW}Stopping $service...${NC}"
            systemctl stop "$service"
        else
            echo -e "${RED}Invalid choice.${NC}"
        fi
    fi

    echo -e "${GREEN}Stop completed.${NC}"
}

delete_mode() {
    services=($(systemctl list-unit-files --type=service | grep utunnel | awk '{print $1}'))
    
    if [[ ${#services[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No utunnel services found.${NC}"
        
        # Check if /opt/utunnel directory exists
        if [[ -d /opt/utunnel ]]; then
            echo -e "${YELLOW}Found /opt/utunnel directory. Deleting it with its contents...${NC}"
            rm -rf /opt/utunnel
            echo -e "${GREEN}/opt/utunnel directory and its contents have been removed.${NC}"
        else
            echo -e "${YELLOW}/opt/utunnel directory does not exist.${NC}"
        fi

        # حذف کرون جاب‌های مربوط به ریست سرویس‌های utunnel
        echo -e "${YELLOW}Checking for utunnel cron jobs...${NC}"
        crontab -l | grep -v "systemctl restart utunnel_*" | crontab -
        echo -e "${GREEN}All utunnel cron jobs have been removed.${NC}"
        return
    fi

    echo -e "${CYAN}List of utunnel services:${NC}"
    for i in "${!services[@]}"; do
        echo -e "${GREEN}$((i+1))) ${services[$i]}${NC}"
    done

    echo -e "${YELLOW}0) Return to main menu${NC}"

    read -p "$(echo -e ${CYAN}"Enter the number of the service to delete (or 'all' to delete all): "${NC})" choice

    if [[ "$choice" == "0" ]]; then
        return
    elif [[ "$choice" == "all" ]]; then
        for service in "${services[@]}"; do
            echo -e "${YELLOW}Stopping and disabling $service...${NC}"
            systemctl stop "$service"
            systemctl disable "$service"
            
            service_file="/etc/systemd/system/$service"
            if [[ -f "$service_file" ]]; then
                echo -e "${YELLOW}Removing service file: $service_file${NC}"
                rm -f "$service_file"
            fi
        done
        echo -e "${RED}Removing /opt/utunnel directory and its contents...${NC}"
        if [[ -d /opt/utunnel ]]; then
            rm -rf /opt/utunnel
            echo -e "${YELLOW}/opt/utunnel directory removed.${NC}"
        else
            echo -e "${YELLOW}/opt/utunnel directory does not exist.${NC}"
        fi

        # حذف کرون جاب‌های مربوط به ریست سرویس‌های utunnel
        echo -e "${YELLOW}Checking for utunnel cron jobs...${NC}"
        crontab -l | grep -v "systemctl restart utunnel_*" | crontab -
        echo -e "${GREEN}All utunnel cron jobs have been removed.${NC}"
    else
        if [[ $choice -ge 1 && $choice -le ${#services[@]} ]]; then
            service=${services[$((choice-1))]}
            echo -e "${YELLOW}Stopping and disabling $service...${NC}"
            systemctl stop "$service"
            systemctl disable "$service"
            
            service_file="/etc/systemd/system/$service"
            if [[ -f "$service_file" ]]; then
                echo -e "${YELLOW}Removing service file: $service_file${NC}"
                rm -f "$service_file"
            fi

            config_file="/opt/utunnel/config_${service#utunnel_}.toml"
            if [[ -f "$config_file" ]]; then
                echo -e "${YELLOW}Removing config file: $config_file${NC}"
                rm -f "$config_file"
            fi

            # Check if there are any remaining services
            remaining_services=($(systemctl list-unit-files --type=service | grep utunnel | awk '{print $1}'))
            if [[ ${#remaining_services[@]} -eq 0 ]]; then
                echo -e "${YELLOW}No remaining utunnel services found. Deleting /opt/utunnel directory...${NC}"
                if [[ -d /opt/utunnel ]]; then
                    rm -rf /opt/utunnel
                    echo -e "${GREEN}/opt/utunnel directory and its contents have been removed.${NC}"
                else
                    echo -e "${YELLOW}/opt/utunnel directory does not exist.${NC}"
                fi

                # حذف کرون جاب‌های مربوط به ریست سرویس‌های utunnel
                echo -e "${YELLOW}Checking for utunnel cron jobs...${NC}"
                crontab -l | grep -v "systemctl restart utunnel_*" | crontab -
                echo -e "${GREEN}All utunnel cron jobs have been removed.${NC}"
            fi
        else
            echo -e "${RED}Invalid choice.${NC}"
        fi
    fi

    echo -e "${GREEN}Cleanup completed.${NC}"
}

reset_timer() {
    read -p "$(echo -e ${CYAN}"Enter the hour (0-23) to reset utunnel services: "${NC})" hour

    if [[ "$hour" -lt 0 || "$hour" -gt 23 ]]; then
        echo -e "${RED}Invalid hour. Please enter a value between 0 and 23.${NC}"
        return
    fi

    # ایجاد کرون جاب برای ریست سرویس‌ها در ساعت مشخص
    cron_job="0 $hour * * * systemctl restart utunnel_*"
    (crontab -l 2>/dev/null | grep -v "systemctl restart utunnel_*"; echo "$cron_job") | crontab -

    echo -e "${GREEN}Cron job set to reset utunnel services at $hour:00 daily.${NC}"
}

# Main script execution
check_allowed_ips
ip_allowed=$?  

if [[ $ip_allowed -eq 1 ]]; then
    restricted_access=true
    echo -e "${YELLOW}Server IP is not in the allowed list. Access restricted to status, restart, stop, delete, and reset timer modes only.${NC}"
else
    restricted_access=false
fi

while true; do
    show_menu
    read -p "$(echo -e ${CYAN}"Enter your choice (1/2/3/4/5/6/7/8): "${NC})" choice

    case $choice in
        1)
            if [[ "$restricted_access" == true ]]; then
                echo -e "${RED}Access denied. Server IP is not in the allowed list.${NC}"
            else
                server_mode
            fi
            ;;
        2)
            if [[ "$restricted_access" == true ]]; then
                echo -e "${RED}Access denied. Server IP is not in the allowed list.${NC}"
            else
                client_mode
            fi
            ;;
        3)
            status_mode
            ;;
        4)
            restart_mode
            ;;
        5)
            stop_mode
            ;;
        6)
            delete_mode
            ;;
        7)
            reset_timer
            ;;
        8)
            echo -e "${GREEN}Exiting the script. Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice. Please try again.${NC}"
            ;;
    esac

    sleep 2
done